import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
import numpy as np
import pandas as pd
import os
import csv
import faiss
import joblib
from sentence_transformers import SentenceTransformer, CrossEncoder
from ultralytics import YOLO
from aiogram.dispatcher.filters import CommandStart, Text
import requests
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ó–∞–¥–∞—ë–º —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
API_TOKEN = os.getenv("API_TOKEN")

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ FSM (MemoryStorage –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π)
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –∏ –¥–∞–Ω–Ω—ã—Ö
sbert_model = SentenceTransformer('paraphrase-MiniLM-L6-v2')
cross_encoder = CrossEncoder('cross-encoder/stsb-roberta-base')

# –ó–∞–≥—Ä—É–∑–∫–∞ embedding-–æ–≤, faiss –∏–Ω–¥–µ–∫—Å–∞ –∏ scaler'–∞
dog_embeddings = np.load('/Users/tolubai/Desktop/final_project/model/dog_embeddings.npy')
index = faiss.read_index('/Users/tolubai/Desktop/final_project/model/faiss_index.bin')
scaler = joblib.load('/Users/tolubai/Desktop/final_project/model/scaler.pkl')

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–±–∞–∫–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ CSV)
dog_data = pd.read_csv('/Users/tolubai/Desktop/final_project/datasets/cleaned_dataset.csv')
dog_data_copy = dog_data.copy()
original_dog_data = pd.read_csv('/Users/tolubai/Desktop/final_project/datasets/dog_breeds.csv')

# –ó–∞–≥—Ä—É–∑–∫–∞ YOLO –º–æ–¥–µ–ª–∏
MODEL_PATH = os.path.join("/Users/tolubai/Desktop/final_project/model", "weight.pt")
model = YOLO(MODEL_PATH).to('cpu')
dog_breeds_df = pd.read_csv('/Users/tolubai/Desktop/final_project/datasets/dogdf.csv')

#*******
def get_main_menu_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    main_menu_button = KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    keyboard.add(main_menu_button)
    return keyboard

@dp.message_handler(lambda message: message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", state='*')
async def go_to_main_menu(message: types.Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.finish()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º finish –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ choose_action
    await MainStates.choose_action.set()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await send_welcome(message)
#***********

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class MainStates(StatesGroup):
    choose_action = State()
    find_breed = State()
    describe_dog = State()

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—è
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_name = message.from_user.first_name  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n"
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Ä–æ–¥—É —Å–æ–±–∞–∫–∏ –ø–æ —Ñ–æ—Ç–æ –∏–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–æ–±–∞–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è. "
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "- üì∏ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ—ë –ø–æ—Ä–æ–¥—É.\n"
        "- üìù –û–ø–∏—à–∏, –∫–∞–∫—É—é —Å–æ–±–∞–∫—É —Ç—ã —Ö–æ—á–µ—à—å, –∏ —è –ø–æ–¥–±–µ—Ä—É –≤–∞—Ä–∏–∞–Ω—Ç—ã.\n"
        "\n–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —Å–¥–µ–ª–∞—Ç—å?"
    )
    keyboard = InlineKeyboardMarkup(row_width=2)
    find_breed_button = InlineKeyboardButton("–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Ä–æ–¥—É –ø–æ —Ñ–æ—Ç–æ", callback_data="find_breed")
    describe_dog_button = InlineKeyboardButton("–ü–æ–¥–æ–±—Ä–∞—Ç—å —Å–æ–±–∞–∫—É –ø–æ –∑–∞–ø—Ä–æ—Å—É", callback_data="describe_dog")
    keyboard.add(find_breed_button, describe_dog_button)
    
    await MainStates.choose_action.set()
    await message.reply(welcome_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è
@dp.callback_query_handler(Text(startswith="find_breed"), state=MainStates.choose_action)
async def choose_find_breed(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —è –æ–ø—Ä–µ–¥–µ–ª–∏–ª –µ—ë –ø–æ—Ä–æ–¥—É:")
    await MainStates.find_breed.set()
    await bot.answer_callback_query(callback_query.id)

@dp.callback_query_handler(Text(startswith="describe_dog"), state=MainStates.choose_action)
async def choose_describe_dog(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–û–ø–∏—à–∏ –∂–µ–ª–∞–µ–º—É—é —Å–æ–±–∞–∫—É:")
    await Form.description.set()
    await bot.answer_callback_query(callback_query.id)
    
#-----------------------------------------------------------------------------------------------------------------------------

class States(StatesGroup):
    start = State()
    photo = State()

# –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä–æ–¥—ã –ø–æ —Ñ–æ—Ç–æ (YOLO)
@dp.message_handler(state=MainStates.find_breed, content_types=['photo'])
async def photo_handler(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    photo = message.photo[0]

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    file_id = photo.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    await bot.download_file(file_path, f"dog_{message.from_user.id}.jpg")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await handle_image_from_file(message, state, f"dog_{message.from_user.id}.jpg") 
    
    await state.update_data(last_action='find_breed')
    await state.reset_state(with_data=False)
    await ask_to_continue_or_return(message)
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—Å—ã–ª–æ–∫)
@dp.message_handler(state=MainStates.find_breed, content_types=['text'])
async def text_handler(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if message.text.startswith("http"):
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ
            response = requests.get(message.text, stream=True)
            response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            with open(f"dog_{message.from_user.id}.jpg", "wb") as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            await handle_image_from_file(message, state, f"dog_{message.from_user.id}.jpg") 
            
            await state.update_data(last_action='find_breed')
            await state.reset_state(with_data=False)
            await ask_to_continue_or_return(message)
            
        except requests.exceptions.RequestException as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.", reply_markup=get_main_menu_keyboard())

async def handle_image_from_file(message: types.Message, state: FSMContext, file_path: str):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–¥—É
    results = model(file_path)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ YOLO –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø–æ—Ä–æ–¥—É
    if len(results[0].boxes.cls) > 0:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        most_likely_class_index = int(results[0].boxes.cls[0])
        breed = results[0].names[most_likely_class_index]
        confidence = results[0].boxes.conf[0].item()  # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ä–æ–¥–µ –∏–∑ DataFrame
        try:
            breed_info = dog_breeds_df[dog_breeds_df["label_name"] == breed]
            label = breed_info["label_ru"].iloc[0]
            description = breed_info["description"].iloc[0]
            link = breed_info["link"].iloc[0]

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
            await message.answer(f"–≠—Ç–æ {label}! \n\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {confidence:.2f}\n\n{description}\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {link}")

        except IndexError:
            await message.answer("–ò–∑–≤–∏–Ω–∏, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–π –ø–æ—Ä–æ–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")

    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Ä–æ–¥—É —ç—Ç–æ–π —Å–æ–±–∞–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

    # –£–¥–∞–ª—è–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(file_path)
    
#-----------------------------------------------------------------------------------------------------------------------------

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

min_price = dog_data_copy['Average Cost'].min()
max_price = dog_data_copy['Average Cost'].max()

min_height = dog_data_copy['Average Height'].min()
max_height = dog_data_copy['Average Height'].max()

min_weight = dog_data_copy['Average Weight'].min()
max_weight = dog_data_copy['Average Weight'].max()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è (–æ–ø–∏—Å–∞–Ω–∏–µ, —Ü–µ–Ω–∞, —Ä–æ—Å—Ç, –≤–µ—Å, shedding, care_experience, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
class Form(StatesGroup):
    description = State()
    price = State()
    height = State()
    weight = State()
    shedding = State()
    care_experience = State()
    num_results = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è
@dp.message_handler(state=Form.description)
async def process_description(message: types.Message, state: FSMContext):
    user_data['description'] = message.text
    await Form.next()
    await message.reply("–£–∫–∞–∂–∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é —Ü–µ–Ω—É (—Ç—ã—Å. —Ä—É–±.):")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã
@dp.message_handler(state=Form.price)
async def process_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        if min_price <= price <= max_price:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞
            user_data['price'] = price
            await Form.next()
            await message.reply(f"–£–∫–∞–∂–∏ —Ä–æ—Å—Ç –∂–µ–ª–∞–µ–º–æ–π —Å–æ–±–∞–∫–∏ (–æ—Ç {min_height} –¥–æ {max_height} —Å–º):")
        else:
            await message.reply(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ü–µ–Ω—É –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç {min_price} –¥–æ {max_price} —Ç—ã—Å. —Ä—É–±.")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ).")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞
@dp.message_handler(state=Form.height)
async def process_height(message: types.Message, state: FSMContext):
    try:
        height = float(message.text)
        if min_height <= height <= max_height:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–æ—Å—Ç–∞ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞
            user_data['height'] = height
            await Form.next()
            await message.reply(f"–£–∫–∞–∂–∏ –≤–µ—Å –∂–µ–ª–∞–µ–º–æ–π —Å–æ–±–∞–∫–∏ (–æ—Ç {min_weight} –¥–æ {max_weight} –∫–≥):")
        else:
            await message.reply(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Ä–æ—Å—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç {min_height} –¥–æ {max_height} —Å–º.")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (—á–∏—Å–ª–æ).")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –≤–µ—Å–∞
@dp.message_handler(state=Form.weight)
async def process_weight(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text)
        if min_weight <= weight <= max_weight:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω –≤–µ—Å–∞ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞
            user_data['weight'] = weight
            await ask_shedding(message)
        else:
            await message.reply(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–µ—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –æ—Ç {min_weight} –¥–æ {max_weight} –∫–≥.")
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ).")

# –í–æ–ø—Ä–æ—Å –æ shedding
async def ask_shedding(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("–ú–∞–ª–æ –ª–∏–Ω—è–µ—Ç", callback_data="Sheds Little"),
        InlineKeyboardButton("–õ–∏–Ω—è–µ—Ç", callback_data="Sheds"),
        InlineKeyboardButton("–ú–Ω–æ–≥–æ –ª–∏–Ω—è–µ—Ç", callback_data="Sheds A Lot"),
        InlineKeyboardButton("–ù–µ –ª–∏–Ω—è–µ—Ç", callback_data="No Sheds")
    ]
    keyboard.add(*buttons)
    
    await Form.shedding.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ shedding
    await bot.send_message(message.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–∏–Ω—å–∫–∏:", reply_markup=keyboard)

@dp.callback_query_handler(state=Form.shedding)
async def process_shedding(callback_query: types.CallbackQuery, state: FSMContext):
    user_data['sheds'] = callback_query.data
    await Form.next()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await ask_care_experience(callback_query)

# –í–æ–ø—Ä–æ—Å –æ Care Experience (–¥–∞/–Ω–µ—Ç)
async def ask_care_experience(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton("–î–∞", callback_data="care_yes"),
        InlineKeyboardButton("–ù–µ—Ç", callback_data="care_no")
    ]
    keyboard.add(*buttons)
    
    await Form.care_experience.set()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await bot.send_message(callback_query.from_user.id, "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è –æ–ø—ã—Ç —É—Ö–æ–¥–∞ –∑–∞ —Å–æ–±–∞–∫–æ–π?", reply_markup=keyboard)

@dp.callback_query_handler(state=Form.care_experience)
async def process_care_experience(callback_query: types.CallbackQuery, state: FSMContext):
    user_data['care_experience'] = 1 if callback_query.data == "care_yes" else 0
    await Form.next()  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
    await ask_num_results(callback_query)

# –í–æ–ø—Ä–æ—Å –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å–æ–±–∞–∫
async def ask_num_results(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–°–∫–æ–ª—å–∫–æ —Å–æ–±–∞–∫ –≤—ã–≤–µ—Å—Ç–∏?")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–±–∞–∫
@dp.message_handler(state=Form.num_results)
async def process_num_results(message: types.Message, state: FSMContext):
    if message.text.isdigit():
        user_data['num_results'] = int(message.text)
        await search_dogs(message)
        await state.update_data(last_action='describe_dog')
        await state.reset_state(with_data=False)
        await ask_to_continue_or_return(message)  
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

#-----------------------------------------------------------------------------------------------------------------------------
async def ask_to_continue_or_return(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
    keyboard = InlineKeyboardMarkup(row_width=2)
    continue_button = InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–¥–µ—Å—å", callback_data="continue_here")
    return_button = InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é", callback_data="go_to_choice")
    keyboard.add(continue_button, return_button)
    
    await message.reply("–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?", reply_markup=keyboard)
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–¥–µ—Å—å"
@dp.callback_query_handler(Text(startswith="continue_here"))
async def continue_here(callback_query: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    data = await state.get_data()
    last_action = data.get('last_action')
    
    if last_action == 'describe_dog':
        await callback_query.message.reply("–û–ø–∏—à–∏ –∂–µ–ª–∞–µ–º—É—é —Å–æ–±–∞–∫—É —Å–Ω–æ–≤–∞:")
        await Form.description.set()
    elif last_action == 'find_breed':
        await callback_query.message.reply("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏ —Å–Ω–æ–≤–∞:")
        await MainStates.find_breed.set()
    else:
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        await callback_query.message.reply("–û—à–∏–±–∫–∞: –Ω–µ –º–æ–≥—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
    
    await bot.answer_callback_query(callback_query.id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É"
@dp.callback_query_handler(Text(startswith="go_to_choice"))
async def go_to_choice(callback_query: types.CallbackQuery, state: FSMContext):
    await state.reset_state(with_data=False)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—è
    await send_welcome(callback_query.message)
    await bot.answer_callback_query(callback_query.id)
    
#-----------------------------------------------------------------------------------------------------------------------------

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–∞–∫ (–ø—Ä–∏–º–µ—Ä)
async def search_dogs(message: types.Message):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–±–∞–∫
    await message.reply("–°–æ–±–∞–∫–∏ –Ω–∞–π–¥–µ–Ω—ã!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
def process_query(query, price, height, weight, sheds, care_experience, top_n):
    # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ (–æ–ø–∏—Å–∞–Ω–∏–µ)
    query_embedding = sbert_model.encode(query, convert_to_tensor=True).cpu().numpy()

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (—Ü–µ–Ω–∞, —Ä–æ—Å—Ç, –≤–µ—Å)
    query_numeric = np.array([price, height, weight]).reshape(1, -1)
    query_numeric = scaler.transform(query_numeric)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ shedding
    filtered_dog_data = dog_data_copy.copy()

    if sheds == 'Sheds Little':
        filtered_dog_data = filtered_dog_data[filtered_dog_data['Sheds Little'] == 1.0]
    elif sheds == 'Sheds':
        filtered_dog_data = filtered_dog_data[filtered_dog_data['Sheds'] == 1.0]
    elif sheds == 'Sheds A Lot':
        filtered_dog_data = filtered_dog_data[filtered_dog_data['Sheds A Lot'] == 1.0]
    elif sheds == 'No Sheds':
        # –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ No Sheds –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω–∏ –æ–¥–∏–Ω –∏–∑ —Ç—Ä–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ shedding –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.
        filtered_dog_data = filtered_dog_data[
            (filtered_dog_data['Sheds Little'] == 0.0) & 
            (filtered_dog_data['Sheds'] == 0.0) & 
            (filtered_dog_data['Sheds A Lot'] == 0.0)
        ]
        
    if care_experience == 0:  # –ï—Å–ª–∏ –æ–ø—ã—Ç —É—Ö–æ–¥–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        filtered_dog_data = filtered_dog_data[filtered_dog_data['Care Experience'] == 0]
    elif care_experience == 1:  # –ï—Å–ª–∏ –æ–ø—ã—Ç —É—Ö–æ–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        filtered_dog_data = filtered_dog_data[filtered_dog_data['Care Experience'] == 1]

    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–±–∞–∫, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    if filtered_dog_data.empty:
        return []

    results = []

    for i, row in filtered_dog_data.iterrows():
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤, —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ shedding –¥–ª—è –∫–∞–∂–¥–æ–π —Å–æ–±–∞–∫–∏
        dog_sheds_data = row[['Sheds Little', 'Sheds', 'Sheds A Lot']].values
        dog_embedding = np.hstack((
            query_embedding.reshape(1, -1),  # –≠–º–±–µ–¥–¥–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞
            query_numeric,                   # –ß–∏—Å–ª–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            dog_sheds_data.reshape(1, -1),   # –î–∞–Ω–Ω—ã–µ –ø–æ shedding
            np.array([[care_experience]]).reshape(1, -1)  # –û–ø—ã—Ç —É—Ö–æ–¥–∞
        )).astype('float32')

        # –ü–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —Å–æ—Å–µ–¥–µ–π –≤ FAISS –∏–Ω–¥–µ–∫—Å–µ
        distances, indices = index.search(dog_embedding, top_n)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results.append({
            "Name": row['Name'],
            "Description": row['Description'],
            "Relevance Score": distances[0][0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        })

    return results[:top_n]

# –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
csv_file_path = '/Users/tolubai/Desktop/final_project/datasets/dog_search_results.csv'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–∞–π–ª
def save_search_data(user_data, results):
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏
    rows = []
    for result in results:
        rows.append({
            'description': user_data['description'],
            'price': user_data['price'],
            'height': user_data['height'],
            'weight': user_data['weight'],
            'sheds': user_data['sheds'],
            'care_experience': user_data['care_experience'],
            'dog_name': result['Name'],
            'dog_description': result['Description'],
            'relevance_score': result['Relevance Score'],
            'final_score': result.get('Final Score', 'N/A')
        })

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    if not os.path.exists(csv_file_path):
        df = pd.DataFrame(rows)
        df.to_csv(csv_file_path, mode='w', header=True, index=False)
    else:
        # –î–æ–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω–µ—Ü —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞
        df = pd.DataFrame(rows)
        df.to_csv(csv_file_path, mode='a', header=False, index=False)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–∞–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async def search_dogs(message: types.Message):
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    description = user_data['description']
    price = user_data['price']
    height = user_data['height']
    weight = user_data['weight']
    sheds = user_data['sheds']
    care_experience = user_data['care_experience']
    num_results = user_data['num_results']

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞
    results = process_query(description, price, height, weight, sheds, care_experience, num_results)

    # –í–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
    description_weight = 0.5
    price_weight = 0.3
    weight_weight = 0.2

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    for result in results:
        description_score = result['Relevance Score']  # –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä–æ–¥—É –∏–∑ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
        breed_name = result['Name']
        breed_data = dog_data_copy[dog_data_copy['Name'] == breed_name].iloc[0]

        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω–µ –∏ –≤–µ—Å—É
        price_score = 1 - abs((breed_data['Average Cost'] - price) / price)
        weight_score = 1 - abs((breed_data['Average Weight'] - weight) / weight)

        # –ò—Ç–æ–≥–æ–≤—ã–π –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫–æ—Ä —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
        result['Final Score'] = (description_score * description_weight) + \
                                (price_score * price_weight) + \
                                (weight_score * weight_weight)

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    sorted_results = sorted(results, key=lambda x: x['Final Score'], reverse=True)
    
    save_search_data(user_data, sorted_results)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    for result in sorted_results:
        # –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã
        breed_name = result['Name']
        original_description = original_dog_data.loc[original_dog_data['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã'] == breed_name, '–û–ø–∏—Å–∞–Ω–∏–µ'].values[0]
        image_url = original_dog_data.loc[original_dog_data['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã'] == breed_name, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'].values[0]
        cost = original_dog_data.loc[original_dog_data['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã'] == breed_name, '–°—Ç–æ–∏–º–æ—Å—Ç—å'].values[0]
        dog_link = original_dog_data.loc[original_dog_data['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã'] == breed_name, '–°—Å—ã–ª–∫–∞'].values[0]

        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 50 —Å–ª–æ–≤
        description_words = original_description.split()
        limited_description = " ".join(description_words[:50]) + "..."

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        caption = (
            f"–ü–æ—Ä–æ–¥–∞: {breed_name}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {limited_description}\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {cost}\n"
            f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {dog_link}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å–æ–±–∞–∫–∏
        keyboard = InlineKeyboardMarkup()
        button_yes = InlineKeyboardButton("–ü–æ–¥–æ—à–ª–∞", callback_data=f"yes_{breed_name}")
        button_no = InlineKeyboardButton("–ù–µ –ø–æ–¥–æ—à–ª–∞", callback_data=f"no_{breed_name}")
        keyboard.add(button_yes, button_no)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        if image_url:
            await bot.send_photo(message.chat.id, image_url, caption=caption, reply_markup=keyboard)
            
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥–æ—à–ª–∞"
@dp.callback_query_handler(lambda c: c.data.startswith('yes_'))
async def process_yes_feedback(callback_query: types.CallbackQuery):
    breed_name = callback_query.data[4:]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã –∏–∑ callback_data
    await bot.answer_callback_query(callback_query.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏, —á—Ç–æ —Å–æ–±–∞–∫–∞ {breed_name} –ø–æ–¥–æ—à–ª–∞.")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
    save_feedback(callback_query.from_user.id, breed_name, '–ü–æ–¥–æ—à–ª–∞')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–µ –ø–æ–¥–æ—à–ª–∞"
@dp.callback_query_handler(lambda c: c.data.startswith('no_'))
async def process_no_feedback(callback_query: types.CallbackQuery):
    breed_name = callback_query.data[3:]  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã –∏–∑ callback_data
    await bot.answer_callback_query(callback_query.id, text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏, —á—Ç–æ —Å–æ–±–∞–∫–∞ {breed_name} –Ω–µ –ø–æ–¥–æ—à–ª–∞.")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
    save_feedback(callback_query.from_user.id, breed_name, '–ù–µ –ø–æ–¥–æ—à–ª–∞')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
def save_feedback(user_id, breed_name, feedback):
    with open('/Users/tolubai/Desktop/final_project/datasets/feedback_dataset.csv', 'a') as f:
        writer = csv.writer(f)
        writer.writerow([user_id, breed_name, feedback])

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
